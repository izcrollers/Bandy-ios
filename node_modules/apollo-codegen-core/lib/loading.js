"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const localfs_1 = require("./localfs");
const common_tags_1 = require("common-tags");
const graphql_1 = require("graphql");
const errors_1 = require("./errors");
function loadSchema(schemaPath) {
    if (!localfs_1.fs.existsSync(schemaPath)) {
        throw new errors_1.ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);
    }
    const schemaData = require(schemaPath);
    if (!schemaData.data && !schemaData.__schema) {
        throw new errors_1.ToolError("GraphQL schema file should contain a valid GraphQL introspection query result");
    }
    return graphql_1.buildClientSchema(schemaData.data ? schemaData.data : schemaData);
}
exports.loadSchema = loadSchema;
function maybeCommentedOut(content) {
    return ((content.indexOf("/*") > -1 && content.indexOf("*/") > -1) ||
        content.split("//").length > 1);
}
function filterValidDocuments(documents) {
    return documents.filter(document => {
        const source = new graphql_1.Source(document);
        try {
            graphql_1.parse(source);
            return true;
        }
        catch (e) {
            if (!maybeCommentedOut(document)) {
                console.warn(common_tags_1.stripIndents `
            Failed to parse:

            ${document.trim().split("\n")[0]}...
          `);
            }
            return false;
        }
    });
}
function extractDocumentFromJavascript(content, options = {}) {
    let tagName = options.tagName || "gql";
    const re = new RegExp(tagName + "s*`([^`]*)`", "g");
    let match;
    let matches = [];
    while ((match = re.exec(content))) {
        const doc = match[1].replace(/\${[^}]*}/g, "");
        matches.push(doc);
    }
    matches = filterValidDocuments(matches);
    const doc = matches.join("\n");
    return doc.length ? doc : null;
}
exports.extractDocumentFromJavascript = extractDocumentFromJavascript;
function loadQueryDocuments(inputPaths, tagName = "gql") {
    const sources = inputPaths
        .map(inputPath => {
        if (localfs_1.fs.lstatSync(inputPath).isDirectory()) {
            return null;
        }
        const body = localfs_1.fs.readFileSync(inputPath, "utf8");
        if (!body) {
            return null;
        }
        if (inputPath.endsWith(".jsx") ||
            inputPath.endsWith(".js") ||
            inputPath.endsWith(".tsx") ||
            inputPath.endsWith(".ts")) {
            const doc = extractDocumentFromJavascript(body.toString(), { tagName });
            return doc ? new graphql_1.Source(doc, inputPath) : null;
        }
        if (inputPath.endsWith(".graphql") || inputPath.endsWith(".gql")) {
            return new graphql_1.Source(body, inputPath);
        }
        return null;
    })
        .filter(source => source)
        .map(source => {
        try {
            return graphql_1.parse(source);
        }
        catch (_a) {
            return null;
        }
    })
        .filter(source => source);
    return sources;
}
exports.loadQueryDocuments = loadQueryDocuments;
function loadAndMergeQueryDocuments(inputPaths, tagName = "gql") {
    return graphql_1.concatAST(loadQueryDocuments(inputPaths, tagName));
}
exports.loadAndMergeQueryDocuments = loadAndMergeQueryDocuments;
//# sourceMappingURL=loading.js.map